#+TITLE: ga-image Project Plan
#+AUTHOR: J. Bromley <jbromley@gmail.com>
#+DATE: February 23, 2011

* ga-image application						    :PROJECT:
** Why?
 - Write a more complicated (than ga-circles) genetic algorithm application
 - Experiment with structured genomes and the corresponding GA operators
 - Produce an interesting movie out of the evolution
 - Gain experience with doing visualizations in Common Lisp
 - Compare performance to algorithm from [[http://rogeralsing.com/2008/12/07/genetic-programming-evolution-of-mona-lisa/][Genetic Programming:
   Evolution of Mona Lisa]]
 - Experiment with use of OpenCV and cl-opencv

** Outcome
An application that allows the user to either specify an image or snap
an image from the video camera. The application will then use a
genetic algorithm to copy the source image. As the evolution continues
the best individual from each generation will be shown in the main
window. If the user desires, a movie of the evolution can also be
written to disk. The evolution continues until either the fitness hits
a plateau or the user manually ends evolution. The final image is then
written to disk with some metrics about its fitness.

** Brainstorming Ideas
*** show target image and best individual side-by-side
*** use opticl or ch-image for drawing
*** use cl-cairo2 for drawing
*** point struct to handle points
*** polygon struct to handle polygons as a number of points
*** run function has single optional file name parameter
*** if there is no file name parameter then capture an image from camera
*** camera capture show on target image half of window
*** snap image from webcam with space bar
*** build GUI with SDL or with OpenCV
*** mutation - add or subtract a small number from target
*** mutation - give each component a possibility of being mutated
*** if number of sides is mutated, add or remove points
*** represent polygons as number of sides and a list of vertices
Use absolute x, y coordinates
*** represent polygons as number of sides, origin, and a list of vertices
**** Use polar coordinates w/ respect to shape origin
**** mutate by tweaking angles and radii
*** crossover by switching polygons between parents
*** have a termination condition
*** allow manual termination
*** write a move of the evolution
*** allow number of polygons as program argument
*** allow maximum number of polygon sides as a program argument
*** how do we handle fixing up genomes after crossover/mutation
*** 

** Plan
*** Drawing and data structure basics
**** DONE create point and polygon structs
**** DONE create functions for random points and random polygons
**** DONE create function for random colors
**** DONE test program to draw random polygons with cairo
**** TODO figure out how to convert between surface types (memory to screen)
**** TODO test program for putting Cairo bits into OpenCV
**** TODO implement OpenCV functions for image differencing
*** Representation and operators
**** DONE experiment with Cartesian and polar representations
**** TODO design crossover operator
**** TODO design mutation operator
*** Frameworks
**** TODO function to create the initial population
**** TODO function for rank selection
**** TODO function to drive evolution
**** TODO modify framework from ga-circles for new type of genome
